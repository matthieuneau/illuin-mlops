# To launch a ray cluster locally. hard to make it work on MacOS
cluster_name: local_cluster

docker:
  image: "rayproject/ray-ml:latest-cpu" # You can change this to latest-cpu if you don't need GPU support and want a faster startup
  # image: rayproject/ray:latest-gpu   # use this one if you don't need ML dependencies, it's faster to pull
  container_name: "ray_container"
  # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
  # if no cached version is present.
  pull_before_run: True
  run_options: # Extra options to pass into "docker run"
    - --ulimit nofile=65536:65536

provider:
  type: local
  head_ip: 127.0.0.1
  worker_ips: []
  external_head_ip: 127.0.0.1
  # You may need to supply a public ip for the head node if you need
  # to run `ray up` from outside of the Ray cluster's network
  # (e.g. the cluster is in an AWS VPC and you're starting ray from your laptop)
  # This is useful when debugging the local node provider with cloud VMs.
  # external_head_ip: YOUR_HEAD_PUBLIC_IP

auth:
  ssh_user: matthieuneau

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# # E.g., if the task requires adding more nodes then autoscaler will gradually
# # scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# # This number should be > 0.
upscaling_speed: 1.0

max_workers: 0 # To prevent ssh connections attempts ??

idle_timeout_minutes: 5

file_mounts: { "~/models/": "./models/" }

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavijr is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
  - "**/.git"
  - "**/.git/**"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
  - ".gitignore"

# List of shell commands to run to set up each nodes.
setup_commands: []

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
  # If we have e.g. conda dependencies, we could create on each node a conda environment (see `setup_commands` section).
  # In that case we'd have to activate that env on each node before running `ray`:
  # - conda activate my_venv && ray stop
  # - conda activate my_venv && ulimit -c unlimited && ray start --head --port=6379 --autoscaling-config=~/ray_bootstrap_config.yaml
  - ray stop
  - ulimit -c unlimited && ray start --head --port=6379 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
  # If we have e.g. conda dependencies, we could create on each node a conda environment (see `setup_commands` section).
  # In that case we'd have to activate that env on each node before running `ray`:
  # - conda activate my_venv && ray stop
  # - ray start --address=$RAY_HEAD_IP:6379
  - ray stop
  - ray start --address=$RAY_HEAD_IP:6379
